package wydr.sellers.activities;

import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;


import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;
import com.squareup.picasso.Picasso;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

import wydr.sellers.PrefManager;
import wydr.sellers.R;
import wydr.sellers.acc.BroadcastUser;
import wydr.sellers.acc.ChatUserSchema;
import wydr.sellers.acc.NetSchema;
import wydr.sellers.adapter.MemberAdapter;
import wydr.sellers.adapter.MemberListAdapter;
import wydr.sellers.modal.Member;
import wydr.sellers.network.AlertDialogManager;
import wydr.sellers.registration.Helper;

/**
 * Created by surya on 9/12/15.
 */
public class CreateBroadcast extends AppCompatActivity implements AdapterView.OnItemSelectedListener, AdapterView.OnItemClickListener {
    Toolbar mToolbar;
    ListView listView;
    EditText name;
    AutoCompleteTextView autoCompleteTextView;
    ArrayList<Member> arrayList;
    ArrayList<Member> memberList;
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    MemberAdapter memberAdapter;
    ArrayList<String> ufList=new ArrayList<>();
    MemberListAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.create_broadcast);
        //  logUser();
        mToolbar = (Toolbar) findViewById(R.id.my_toolbar);
        setSupportActionBar(mToolbar);
        final Drawable upArrow = getResources().getDrawable(R.drawable.back);
        getSupportActionBar().setHomeAsUpIndicator(upArrow);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle(getString(R.string.create_broadcast));
        iniStuff();
        initUff();
        Cursor cursor = getContentResolver().query(ChatProvider.NET_URI, null, NetSchema.USER_STATUS + "=?", new String[]{"1"}, null);
        int iId = cursor.getColumnIndexOrThrow(NetSchema.USER_NET_ID);
        int iName = cursor.getColumnIndexOrThrow(NetSchema.USER_DISPLAY);
        int iNetId = cursor.getColumnIndexOrThrow(NetSchema.USER_NET_ID);
        int iNo = cursor.getColumnIndexOrThrow(NetSchema.USER_PHONE);
        int iUrl = cursor.getColumnIndexOrThrow(NetSchema.USER_IMAGE);
        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
            // do what you need with the cursor here
            Member member = new Member();
            member.setUser_id(cursor.getString(iId));
            member.setName(cursor.getString(iUrl));
            member.setJid(cursor.getString(iNetId));
            if (cursor.getString(iName).length() > 1) {
                member.setName(cursor.getString(iName));
            } else {
                member.setName(cursor.getString(iNo));
            }
            arrayList.add(member);
            // Log.d("Member =>", member.toString());

        }
        adapter = new MemberListAdapter(this, arrayList);
        autoCompleteTextView.setAdapter(adapter);
        //   autoCompleteTextView.setOnItemSelectedListener(this);
        autoCompleteTextView.setOnItemClickListener(this);
        memberAdapter = new MemberAdapter(this, memberList);
        listView.setAdapter(memberAdapter);
    }

    private void iniStuff() {
        listView = (ListView) findViewById(R.id.listViewPeople);
        name = (EditText) findViewById(R.id.editBroadcastName);
        autoCompleteTextView = (AutoCompleteTextView) findViewById(R.id.autoPeople);
        arrayList = new ArrayList<>();
        memberList = new ArrayList<>();
    }

    private void initUff()
    {
        Helper helper = new Helper();

        ImageView iv_bussiness=(ImageView)findViewById(R.id.uf_createBroadcast);
        RelativeLayout ll= (RelativeLayout)findViewById(R.id.rlbroadcast);
        PrefManager prefManager = new PrefManager(getApplicationContext());
        ufList = new ArrayList<String>(Arrays.asList(prefManager.putUFString().split(",")));
        iv_bussiness.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view)
            {

                /*******************************ISTIAQUE***************************************/
                Controller application = (Controller) CreateBroadcast.this.getApplication();
                Tracker mTracker = application.getDefaultTracker();
                application.trackEvent("Broadcast", "Move", "Catalog");
                /*******************************ISTIAQUE***************************************/

                Intent intent = new Intent(getApplicationContext(),Catalog.class);
                startActivity(intent);
            }
        });
        if(ufList.contains(AppUtil.TAG_Quick_Launch_Broadcast))
        {
            ll.setVisibility(View.GONE);
            iv_bussiness.setVisibility(View.VISIBLE);
            Picasso.with(getApplicationContext())
                    .load(helper.getDefaults(AppUtil.TAG_Quick_Launch_Broadcast+"_photo",getApplicationContext()))
                    .into(iv_bussiness);
        }
        else
        {
            ll.setVisibility(View.VISIBLE);
            iv_bussiness.setVisibility(View.GONE);
        }
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {
        InputMethodManager imm = (InputMethodManager) getSystemService(
                INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        Member member = (Member) parent.getItemAtPosition(position);
        if (!equals(memberList, member)) {
            memberList.add(member);
            memberAdapter.notifyDataSetChanged();
            autoCompleteTextView.setText("");
        } else {
            autoCompleteTextView.setText("");
            new AlertDialogManager().showAlertDialog(CreateBroadcast.this, getResources().getString(R.string.alert), getString(R.string.person_already_added));
        }

        //  Log.d("AutocompleteContacts", "Position:" + position + " Month:" + ((Member) parent.getItemAtPosition(position)).getName());
    }

    public void onUserDelete(View view) {
        Member member = (Member) view.getTag();
        memberList.remove(member);
        memberAdapter.notifyDataSetChanged();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.group_name, menu);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
        switch (item.getItemId()) {
            // Respond to the action bar's Up/Home button
            case android.R.id.home:
                NavUtils.navigateUpFromSameTask(this);
                return true;
            case R.id.submitBroadcast:

                /*******************************ISTIAQUE***************************************/
                Controller application = (Controller) CreateBroadcast.this.getApplication();
                Tracker mTracker = application.getDefaultTracker();
                application.trackEvent("Broadcast", "Move", "Broadcast");
                /*******************************ISTIAQUE***************************************/

                if (ufList.contains(AppUtil.TAG_Quick_Launch_Broadcast)) {
                } else {
                    String broadcastName = name.getText().toString().trim();
                    Cursor cursor = getContentResolver().query(ChatProvider.CHAT_USER_URI, null, ChatUserSchema.KEY_CHAT_USER + "=?", new String[]{broadcastName}, null);
                    if (cursor.getCount() > 0) {
                        name.setError(getResources().getString(R.string.broadcast_already_exists));
                        requestFocus(name);
                    } else {
                        if (name.getText().toString() != null && !name.getText().toString().equalsIgnoreCase("")) {
                            if (memberList.size() > 1) {
                                ContentValues cv = new ContentValues();
                                cv.put(ChatUserSchema.KEY_CHAT_USER, broadcastName);
                                cv.put(ChatUserSchema.KEY_TYPE, "broadcast");
                                cv.put(ChatUserSchema.KEY_DIRECTION, "outgoing");
                                cv.put(ChatUserSchema.KEY_UNREAD, 0);
                                cv.put(ChatUserSchema.KEY_CREATED, format.format(Calendar.getInstance().getTime()));
                                Uri uri = getContentResolver().insert(ChatProvider.CHAT_USER_URI, cv);
                                Log.d("Insert Id =>", " " + ContentUris.parseId(uri));

                                long bId = ContentUris.parseId(uri);
                                for (int i = 0; i < memberList.size(); i++) {
                                    Member member = memberList.get(i);
                                    ContentValues values = new ContentValues();
                                    values.put(BroadcastUser.KEY_BID, "" + bId);
                                    values.put(BroadcastUser.KEY_NAME, member.getName());
                                    values.put(BroadcastUser.KEY_JID, member.getJid());
                                    values.put(BroadcastUser.KEY_STATUS, 1);
                                    values.put(BroadcastUser.KEY_CREATED, format.format(Calendar.getInstance().getTime()));
                                    Uri uriUser = getContentResolver().insert(ChatProvider.BROADCAST_USER_URI, values);
                                }
                                startActivity(new Intent(CreateBroadcast.this, Broadcast.class).putExtra("id", "" + bId).putExtra("user", broadcastName));
                                finish();
                            } else {
                                autoCompleteTextView.setError(getString(R.string.recipent));
                                requestFocus(autoCompleteTextView);
                            }
                        } else {
                            name.setError("Enter Broadcast Name");
                            requestFocus(name);
                        }

                    }
                }
        }
        return super.onOptionsItemSelected(item);


    }
    private void requestFocus(View view) {
        if (view.requestFocus()) {
            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
        }
    }
    public boolean equals(ArrayList memberList, Member object) {
        List<Member> listOfCircles = memberList;
        boolean flag = true;

        for (Member currentCircle : listOfCircles) {
            if (currentCircle.getName().equals(object.getName())) {
                return true;
            }
        }
        return false;
    }

    @Override
    protected void onResume() {
        super.onResume();

        Controller application = (Controller) getApplication();
        Tracker mTracker = application.getDefaultTracker();
        mTracker.setScreenName("CreateBroadcast");
        mTracker.send(new HitBuilders.ScreenViewBuilder().build());
    }
}
